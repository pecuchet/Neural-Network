function random(a,b){return Math.floor(Math.random()*(b-a))+a}function extend(a,b){if(!a||!b)return a;for(var c in b)b.hasOwnProperty(c)&&("[object Object]"===Object.prototype.toString.call(b[c])?"[object Object]"!==Object.prototype.toString.call(a[c])?a[c]=b[c]:a[c]=extend(a[c],b[c]):a[c]=b[c]);return a}function Neuron(a,b,c){this.connection=[],this.receivedSignal=!1,this.lastSignalRelease=0,this.releaseDelay=0,this.fired=!1,this.firedCount=0,this.prevReleaseAxon=null,THREE.Vector3.call(this,a,b,c)}function Signal(a,b,c){this.minSpeed=b,this.maxSpeed=c,this.speed=THREE.Math.randFloat(this.minSpeed,this.maxSpeed),this.alive=!0,this.t=null,this.startingPoint=null,this.axon=null,this.particle=a.getParticle(),THREE.Vector3.call(this)}function ParticlePool(a){this.spriteTextureSignal=TEXTURES.electric,this.poolSize=a.limitSignals,this.pGeom=new THREE.Geometry,this.particles=this.pGeom.vertices,this.offScreenPos=new THREE.Vector3(9999,9999,9999),this.pColor=a.signalColor,this.pSize=a.signalSize;for(var b=0;b<this.poolSize;b++)this.particles[b]=new Particle(this);this.meshComponents=new THREE.Object3D,this.pMat=new THREE.PointCloudMaterial({map:this.spriteTextureSignal,size:this.pSize,color:this.pColor,blending:THREE.AdditiveBlending,depthTest:!1,transparent:!0}),this.pMesh=new THREE.PointCloud(this.pGeom,this.pMat),this.pMesh.frustumCulled=!1,this.meshComponents.add(this.pMesh),this.pMat_outer=this.pMat.clone(),this.pMat_outer.size=10*this.pSize,this.pMat_outer.opacity=.04,this.pMesh_outer=new THREE.PointCloud(this.pGeom,this.pMat_outer),this.pMesh_outer.frustumCulled=!1,this.meshComponents.add(this.pMesh_outer)}function Particle(a){this.particlePool=a,this.available=!0,THREE.Vector3.call(this,this.particlePool.offScreenPos.x,this.particlePool.offScreenPos.y,this.particlePool.offScreenPos.z)}function Axon(a,b){this.bezierSubdivision=8,this.neuronA=a,this.neuronB=b,this.cpLength=a.distanceTo(b)/THREE.Math.randFloat(1.5,4),this.controlPointA=this.getControlPoint(a,b),this.controlPointB=this.getControlPoint(b,a),THREE.CubicBezierCurve3.call(this,this.neuronA,this.controlPointA,this.controlPointB,this.neuronB),this.vertices=this.getSubdividedVertices()}function Connection(a,b){this.axon=a,this.startingPoint=b}function NeuralNetwork(a){this.initialized=!1,this.settings=extend(defaults,a||{}),this.meshComponents=new THREE.Object3D,this.particlePool=new ParticlePool(this.settings),this.meshComponents.add(this.particlePool.meshComponents),this.components={neurons:[],allSignals:[],allAxons:[]},this.axonGeom=new THREE.BufferGeometry,this.axonPositions=[],this.axonIndices=[],this.axonNextPositionsIndex=0,this.axonUniforms={color:{type:"c",value:new THREE.Color(this.settings.axonColor)},opacityMultiplier:{type:"f",value:this.settings.axonOpacityMultiplier}},this.axonAttributes={opacity:{type:"f",value:[]}},this.spriteTextureNeuron=TEXTURES.electric,this.neuronsGeom=new THREE.Geometry,this.neuronUniforms={sizeMultiplier:{type:"f",value:this.settings.neuronSizeMultiplier},opacity:{type:"f",value:this.settings.neuronOpacity},texture:{type:"t",value:this.spriteTextureNeuron}},this.neuronAttributes={color:{type:"c",value:[]},size:{type:"f",value:[]}},this.neuronShaderMaterial=new THREE.ShaderMaterial({uniforms:this.neuronUniforms,attributes:this.neuronAttributes,vertexShader:null,fragmentShader:null,blending:THREE.AdditiveBlending,transparent:!0,depthTest:!1}),this.numNeurons=0,this.numAxons=0,this.numSignals=0,this.numPassive=0,this.initNeuralNetwork()}function getAppInstance(a){return app||(app=new App(a))}function update(){this.settings.enableHelpers&&updateHelpers.call(this),this.settings.pause||(this.neuralNet.update(this.clock.getDelta()),this.settings.gui&&updateGuiInfo.call(this))}function updateHelpers(){this.axisHelper.visible=this.settings.enableAxisHelper,this.gridHelper.visible=this.settings.enableGridHelper}function run(){var a=this;TWEEN.update(),requestAnimationFrame(function(){run.call(a)}),this.renderer.setClearColor(this.settings.bgColor,1),this.renderer.clear(),update.call(this),this.renderer.render(this.scene,this.camera),this.settings.stats&&this.stats.update()}function bindDOMEvents(){var a=this,b=a.settings,c=window;c.addEventListener("load",function(){var b;c.addEventListener("resize",function(){clearTimeout(b),b=setTimeout(function(){a.onWindowResize()},250)})}),b.enableHelpers&&c.addEventListener("keypress",function(a){switch(a.keyCode){case 32:b.pause=!b.pause;break;case 65:case 97:b.enableGridHelper=!b.enableGridHelper;break;case 83:case 115:b.enableAxisHelper=!b.enableAxisHelper}})}function updateNeuralNetworkSettings(){this.neuralNet.updateSettings(),this.neuralNet.settings.signalMinSpeed>this.neuralNet.settings.signalMaxSpeed&&(this.neuralNet.settings.signalMaxSpeed=this.neuralNet.settings.signalMinSpeed,this.gui_settings.__controllers[3].updateDisplay())}function updateGuiInfo(){for(var a=0;a<this.gui_info.__controllers.length;a++)this.gui_info.__controllers[a].updateDisplay()}Neuron.prototype=Object.create(THREE.Vector3.prototype),Neuron.prototype.connectNeuronTo=function(a){var b=this,c=new Axon(b,a);return b.connection.push(new Connection(c,"A")),a.connection.push(new Connection(c,"B")),c},Neuron.prototype.createSignal=function(a,b,c){this.firedCount+=1,this.receivedSignal=!1;for(var d=[],e=0;e<this.connection.length;e++)if(this.connection[e].axon!==this.prevReleaseAxon){var f=new Signal(a,b,c);f.setConnection(this.connection[e]),d.push(f)}return d},Neuron.prototype.reset=function(){this.receivedSignal=!1,this.lastSignalRelease=0,this.releaseDelay=0,this.fired=!1,this.firedCount=0},Signal.prototype=Object.create(THREE.Vector3.prototype),Signal.prototype.setConnection=function(a){this.startingPoint=a.startingPoint,this.axon=a.axon,"A"===this.startingPoint?this.t=0:"B"===this.startingPoint&&(this.t=1)},Signal.prototype.travel=function(a){var b;"A"===this.startingPoint?(this.t+=this.speed*a,this.t>=1&&(this.t=1,this.alive=!1,this.axon.neuronB.receivedSignal=!0,this.axon.neuronB.prevReleaseAxon=this.axon)):"B"===this.startingPoint&&(this.t-=this.speed*a,this.t<=0&&(this.t=0,this.alive=!1,this.axon.neuronA.receivedSignal=!0,this.axon.neuronA.prevReleaseAxon=this.axon)),b=this.axon.getPoint(this.t),this.particle.set(b.x,b.y,b.z)},ParticlePool.prototype.getAvgExecutionTime=function(){return this.profTime/this.itt},ParticlePool.prototype.getParticle=function(){for(var a=0;a<this.poolSize;a++){var b=this.particles[a];if(b.available)return this.lastAvailableIdx=a,b.available=!1,b}return console.error("ParticlePool.prototype.getParticle return null"),null},ParticlePool.prototype.update=function(){this.pGeom.verticesNeedUpdate=!0},ParticlePool.prototype.updateSettings=function(){this.pMat.color.setStyle(this.pColor),this.pMat.size=this.pSize,this.pMat_outer.color.setStyle(this.pColor),this.pMat_outer.size=10*this.pSize},Particle.prototype=Object.create(THREE.Vector3.prototype),Particle.prototype.free=function(){this.available=!0,this.set(this.particlePool.offScreenPos.x,this.particlePool.offScreenPos.y,this.particlePool.offScreenPos.z)},Axon.prototype=Object.create(THREE.CubicBezierCurve3.prototype),Axon.prototype.getSubdividedVertices=function(){return this.getSpacedPoints(this.bezierSubdivision)},Axon.prototype.getControlPoint=function(a,b){var c=(new THREE.Vector3).copy(b).sub(a).normalize(),d=new THREE.Vector3(0,0,1),e=(new THREE.Vector3).crossVectors(d,c).normalize(),f=c.angleTo(d),g=(new THREE.Matrix4).makeRotationAxis(e,f),h=Math.cos(THREE.Math.degToRad(45)),i=THREE.Math.randFloat(h,1),j=THREE.Math.randFloat(0,2*Math.PI),k=Math.sqrt(1-i*i),l=new THREE.Vector3(k*Math.cos(j),k*Math.sin(j),i);return l.multiplyScalar(this.cpLength),l.applyMatrix4(g),l.add(a),l};var defaults={verticesSkipStep:3,maxAxonDist:10,maxConnectionsPerNeuron:6,signalSize:.6,signalColor:"#FF4400",signalMinSpeed:1.75,signalMaxSpeed:3.25,currentMaxSignals:3e3,limitSignals:1e4,axonColor:"#0099FF",axonOpacityMultiplier:.5,neuronSizeMultiplier:1,neuronColor:"#00FFFF",neuronOpacity:.75};NeuralNetwork.prototype.initNeuralNetwork=function(){this.initNeurons(OBJ_MODELS.brain.geometry.vertices),this.initAxons(),this.neuronShaderMaterial.vertexShader=SHADER_CONTAINER.neuronVert,this.neuronShaderMaterial.fragmentShader=SHADER_CONTAINER.neuronFrag,this.axonShaderMaterial.vertexShader=SHADER_CONTAINER.axonVert,this.axonShaderMaterial.fragmentShader=SHADER_CONTAINER.axonFrag,this.initialized=!0},NeuralNetwork.prototype.initNeurons=function(a){var b;for(b=0;b<a.length;b+=this.settings.verticesSkipStep){var c=a[b],d=new Neuron(c.x,c.y,c.z);this.components.neurons.push(d),this.neuronsGeom.vertices.push(d)}for(b=0;b<this.components.neurons.length;b++)this.neuronAttributes.color.value[b]=new THREE.Color(this.settings.neuronColor),this.neuronAttributes.size.value[b]=THREE.Math.randFloat(.75,3);this.neuronParticles=new THREE.PointCloud(this.neuronsGeom,this.neuronShaderMaterial),this.meshComponents.add(this.neuronParticles),this.neuronShaderMaterial.needsUpdate=!0},NeuralNetwork.prototype.initAxons=function(){for(var a=this.components.neurons.length,b=0;b<a;b++)for(var c=this.components.neurons[b],d=b+1;d<a;d++){var e=this.components.neurons[d];if(c!==e&&c.distanceTo(e)<this.settings.maxAxonDist&&c.connection.length<this.settings.maxConnectionsPerNeuron&&e.connection.length<this.settings.maxConnectionsPerNeuron){var f=c.connectNeuronTo(e);this.constructAxonArrayBuffer(f)}}getAppInstance().renderer.getContext().getExtension("OES_element_index_uint")||console.error("32bit index buffer not supported!");var g=new Uint32Array(this.axonIndices),h=new Float32Array(this.axonPositions),i=new Float32Array(this.axonAttributes.opacity.value);this.axonGeom.addAttribute("index",new THREE.BufferAttribute(g,1)),this.axonGeom.addAttribute("position",new THREE.BufferAttribute(h,3)),this.axonGeom.addAttribute("opacity",new THREE.BufferAttribute(i,1)),this.axonGeom.computeBoundingSphere(),this.axonShaderMaterial=new THREE.ShaderMaterial({uniforms:this.axonUniforms,attributes:this.axonAttributes,vertexShader:null,fragmentShader:null,blending:THREE.AdditiveBlending,depthTest:!1,transparent:!0}),this.axonMesh=new THREE.Line(this.axonGeom,this.axonShaderMaterial,THREE.LinePieces),this.meshComponents.add(this.axonMesh);for(var j=0,k=0;k<a;k++)this.components.neurons[k].connection[0]||(j+=1);this.settings.debug&&console.log("Number not connected neurons",j)},NeuralNetwork.prototype.update=function(a){if(this.initialized){var b,c,d=Date.now();for(c=0;c<this.components.neurons.length;c++)b=this.components.neurons[c],this.components.allSignals.length<this.settings.currentMaxSignals-this.settings.maxConnectionsPerNeuron&&b.receivedSignal&&b.firedCount<8&&(b.fired=!0,b.lastSignalRelease=d,b.releaseDelay=THREE.Math.randInt(100,1e3),this.releaseSignalAt(b)),b.receivedSignal=!1;0===this.components.allSignals.length&&(this.resetAllNeurons(),this.releaseSignalAt(this.components.neurons[THREE.Math.randInt(0,this.components.neurons.length)]));for(var e=this.components.allSignals.length-1;e>=0;e--){var f=this.components.allSignals[e];if(f.travel(a),!f.alive){f.particle.free();for(var g=this.components.allSignals.length-1;g>=0;g--)if(f===this.components.allSignals[g]){this.components.allSignals.splice(g,1);break}}}this.particlePool.update(),this.updateInfo()}},NeuralNetwork.prototype.constructAxonArrayBuffer=function(a){this.components.allAxons.push(a);for(var b=a.vertices,c=0;c<b.length;c++){if(this.axonPositions.push(b[c].x,b[c].y,b[c].z),c<b.length-1){var d=this.axonNextPositionsIndex;this.axonIndices.push(d,d+1);var e=THREE.Math.randFloat(.005,.2);this.axonAttributes.opacity.value.push(e,e)}this.axonNextPositionsIndex+=1}},NeuralNetwork.prototype.releaseSignalAt=function(a){for(var b=a.createSignal(this.particlePool,this.settings.signalMinSpeed,this.settings.signalMaxSpeed),c=0;c<b.length;c++){var d=b[c];this.components.allSignals.push(d)}},NeuralNetwork.prototype.resetAllNeurons=function(){this.numPassive=0;for(var a,b=0;b<this.components.neurons.length;b++)a=this.components.neurons[b],a.fired||(this.numPassive+=1),a.reset()},NeuralNetwork.prototype.updateInfo=function(){this.numNeurons=this.components.neurons.length,this.numAxons=this.components.allAxons.length,this.numSignals=this.components.allSignals.length},NeuralNetwork.prototype.updateSettings=function(){this.neuronUniforms.opacity.value=this.settings.neuronOpacity;for(var a=0;a<this.components.neurons.length;a++)this.neuronAttributes.color.value[a].setStyle(this.settings.neuronColor);this.neuronAttributes.color.needsUpdate=!0,this.neuronUniforms.sizeMultiplier.value=this.settings.neuronSizeMultiplier,this.axonUniforms.color.value.set(this.settings.axonColor),this.axonUniforms.opacityMultiplier.value=this.settings.axonOpacityMultiplier,this.particlePool.updateSettings()},NeuralNetwork.prototype.testChangOpcAttr=function(){for(var a=this.axonGeom.attributes.opacity.array,b=0;b<a.length;b++)a[b]=THREE.Math.randFloat(0,.5);this.axonGeom.attributes.opacity.needsUpdate=!0};var SHADER_CONTAINER={},OBJ_MODELS={},TEXTURES={},app,appDefaults={debug:1,baseURL:"",testSupport:0,pause:0,runOnLoad:1,spinner:document.getElementById("loading"),bgColor:855311,gui:1,stats:1,enableHelpers:1,mouseInterface:1,initialPosition:{x:61,y:51,z:44},neuralNet:{},travel:{easing:TWEEN.Easing.Quadratic.Out,duration:600,range:{x:[0,69],y:[0,69],z:[0,69]}}},App=function(a){var b=this;if(b.settings=extend(appDefaults,a||{}),b.settings.neuralNet.debug=b.settings.debug,!a.container)throw Error("No container element provided.");if(!b.checkSupport())throw Error("WebGL is not supported by your browser.");b.load(),bindDOMEvents.call(b),b.WIDTH=window.innerWidth,b.HEIGHT=window.innerHeight,b.pixelRatio=window.devicePixelRatio||1,b.screenRatio=b.WIDTH/b.HEIGHT,b.clock=new THREE.Clock,b.container=a.container,b.scene=new THREE.Scene,b.camera=new THREE.PerspectiveCamera(75,b.screenRatio,10,5e3),b.camera.position.set(b.settings.initialPosition.x,b.settings.initialPosition.y,b.settings.initialPosition.z),b.camera.lookAt(new THREE.Vector3(0,0,0)),b.settings.mouseInterface&&(b.cameraCtrl=new THREE.OrbitControls(b.camera,b.container),b.cameraCtrl.update()),b.canTravel=1,b.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),b.renderer.setSize(b.WIDTH,b.HEIGHT),b.renderer.setPixelRatio(b.pixelRatio),b.renderer.setClearColor(b.settings.bgColor,1),b.renderer.autoClear=!1,b.container.appendChild(b.renderer.domElement),b.settings.stats&&(b.stats=new Stats,b.container.appendChild(b.stats.domElement)),b.settings.enableHelpers&&(b.gridHelper=new THREE.GridHelper(600,50),b.gridHelper.setColors(48127,16777215),b.gridHelper.material.opacity=.1,b.gridHelper.material.transparent=!0,b.gridHelper.position.y=-300,b.scene.add(b.gridHelper),b.axisHelper=new THREE.AxisHelper(50),b.scene.add(b.axisHelper),this.settings.enableAxisHelper=this.settings.enableGridHelper=1)};App.prototype.start=function(){return this.isRunning?this:(this.neuralNet=new NeuralNetwork(this.settings.neuralNet),this.scene.add(this.neuralNet.meshComponents),this.settings.gui&&this.initGui(),run.call(this),this.isRunning=1,this)},App.prototype.on=function(a,b){return this.scene.addEventListener(a,b),this},App.prototype.travelRandom=function(a){var b=this.settings.travel.range;return this.travel({x:random(b.x[0],b.x[1]),y:random(b.y[0],b.y[1]),z:random(b.z[0],b.z[1])},a)},App.prototype.travel=function(a,b){var c=this,d=c.settings.travel,e={x:c.camera.position.x,y:c.camera.position.y,z:c.camera.position.z},f=new THREE.Vector3(a.x,a.y,a.y);if(c.canTravel)return new TWEEN.Tween(e).to(a,b||d.duration).easing(d.easing).onStart(function(){c.canTravel=0,c.scene.dispatchEvent({type:"travelStart",position:c.camera.position,distance:c.camera.position.distanceTo(f)})}).onUpdate(function(){c.camera.position.set(this.x,this.y,this.z),c.camera.lookAt(new THREE.Vector3(0,0,0)),c.scene.dispatchEvent({type:"travelUpdate",position:c.camera.position,distance:c.camera.position.distanceTo(f)})}).onComplete(function(){c.camera.lookAt(new THREE.Vector3(0,0,0)),c.canTravel=1,c.scene.dispatchEvent({type:"travelEnd",position:c.camera.position,distance:0})}).start(),this},App.prototype.travelAlong=function(a,b,c){var d=this,e=d.settings.travel;if(d.canTravel)return new TWEEN.Tween({distance:0}).to({distance:b},c||e.duration).easing(e.easing).onStart(function(){d.canTravel=0,d.scene.dispatchEvent({type:"travelStart",position:d.camera.position,distance:b})}).onUpdate(function(){d.camera["translate"+a.toUpperCase()](this.distance),d.camera.lookAt(new THREE.Vector3(0,0,0)),d.scene.dispatchEvent({type:"travelUpdate",position:d.camera.position,distance:this.distance})}).onComplete(function(){d.camera["translate"+a.toUpperCase()](this.distance),d.camera.lookAt(new THREE.Vector3(0,0,0)),d.scene.dispatchEvent({type:"travelEnd",position:d.camera.position,distance:this.distance}),d.canTravel=1}).start(),this},App.prototype.checkSupport=function(){return function(){try{var a=document.createElement("canvas");return!(!window.WebGLRenderingContext||!a.getContext("webgl")&&!a.getContext("experimental-webgl"))}catch(a){return!1}}()},App.prototype.onWindowResize=function(){this.WIDTH=window.innerWidth,this.HEIGHT=window.innerHeight,this.screenRatio=this.WIDTH/this.HEIGHT,this.camera.aspect=this.screenRatio,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.WIDTH,this.HEIGHT),this.renderer.setPixelRatio(this.pixelRatio)},App.prototype.load=function(){var a=this,b=a.settings,c=b.baseURL,d=new THREE.LoadingManager,e=new THREE.XHRLoader(d),f=new THREE.OBJLoader(d),g=new THREE.TextureLoader(d);d.onLoad=function(){b.spinner&&(b.spinner.style.display="none"),b.debug&&console.log("Done loading."),a.scene.dispatchEvent({type:"loaded"}),b.runOnLoad&&a.start()},d.onProgress=function(c,d,e){a.scene.dispatchEvent({type:"loading",item:c,index:d,total:e}),b.debug&&console.log(d+"/"+e,c)},e.setResponseType("text"),e.loadMultiple=function(a,b){Object.keys(b).forEach(function(c){e.load(b[c],function(b){a[c]=b})})},e.loadMultiple(SHADER_CONTAINER,{neuronVert:c+"shaders/neuron.vert",neuronFrag:c+"shaders/neuron.frag",axonVert:c+"shaders/axon.vert",axonFrag:c+"shaders/axon.frag"}),f.load(c+"models/brain_vertex_low.obj",function(a){b.debug&&console.log("Original vertices count",a.children[0].geometry.vertices.length),OBJ_MODELS.brain=a.children[0]}),g.load(c+"sprites/electric.png",function(a){TEXTURES.electric=a})},App.prototype.initGui=function(){this.gui=new dat.GUI,this.gui.width=270,this.gui_info=this.gui.addFolder("Info"),this.gui_info.add(this.neuralNet,"numNeurons").name("Neurons"),this.gui_info.add(this.neuralNet,"numAxons").name("Axons"),this.gui_info.add(this.neuralNet,"numSignals",0,this.neuralNet.settings.limitSignals).name("Signals"),this.gui_info.autoListen=!1,this.gui_settings=this.gui.addFolder("Settings"),this.gui_settings.add(this.neuralNet.settings,"currentMaxSignals",0,this.neuralNet.settings.limitSignals).name("Max Signals"),this.gui_settings.add(this.neuralNet.particlePool,"pSize",.2,2).name("Signal Size"),this.gui_settings.add(this.neuralNet.settings,"signalMinSpeed",0,8,.01).name("Signal Min Speed"),this.gui_settings.add(this.neuralNet.settings,"signalMaxSpeed",0,8,.01).name("Signal Max Speed"),this.gui_settings.add(this.neuralNet.settings,"neuronSizeMultiplier",0,2).name("Neuron Size Mult"),this.gui_settings.add(this.neuralNet.settings,"neuronOpacity",0,1).name("Neuron Opacity"),this.gui_settings.add(this.neuralNet.settings,"axonOpacityMultiplier",0,5).name("Axon Opacity Mult"),this.gui_settings.addColor(this.neuralNet.particlePool,"pColor").name("Signal Color"),this.gui_settings.addColor(this.neuralNet.settings,"neuronColor").name("Neuron Color"),this.gui_settings.addColor(this.neuralNet.settings,"axonColor").name("Axon Color"),this.gui_settings.addColor(this.settings,"bgColor").name("Background"),this.gui_info.open(),this.gui_settings.open();for(var a=0;a<this.gui_settings.__controllers.length;a++)this.gui_settings.__controllers[a].onChange(updateNeuralNetworkSettings.bind(this))};